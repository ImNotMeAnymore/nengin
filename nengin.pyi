import pygame as pg
from _typeshed import Incomplete
from pygame import Vector2 as __vector
from pygame.key import ScancodeWrapper as ScancodeWrapper
from typing import Callable, Type, Union
from typing_extensions import Any

class GenericNenginError(Exception): ...

class _ContextClass(dict[str, 'Scene']):
    def __getitem__(self, k: str) -> Scene: ...

class Vector(__vector):
    @property
    def xi(self) -> int: ...
    @property
    def yi(self) -> int: ...
    @property
    def xyi(self) -> tuple[int, int]: ...

class DoneFlag(Exception): ...

class Scene:
    __byID__: dict[int, 'Scene']
    __curID__: int
    __game__: Union[None, Game]
    @classmethod
    def nameOf(cls, id: int) -> str: ...
    @classmethod
    def idOf(cls, name: str) -> int: ...
    def __init_subclass__(cls, *, debug: bool = ...) -> None: ...
    def changeScene(self, to: str, metadata: dict[Any, Any] = ...) -> None: ...
    def close(self) -> None: ...
    quit: Incomplete
    name: Incomplete
    framerate: Incomplete
    windowName: Incomplete
    windowSize: Incomplete
    windowIcon: Incomplete
    windowPos: Incomplete
    metadata: Incomplete
    __started__: bool
    framecounter: int
    def __init__(self, name: str, framerate: int, windowName: str, windowSize: Vector, windowPos: Union[int, Vector], windowIcon: Union[pg.Surface, None] = ...) -> None: ...
    def onRegister(self) -> None: ...
    def __globalTick__(self) -> None: ...
    def onTick(self) -> None: ...
    def __globalDraw__(self) -> None: ...
    def onDraw(self) -> None: ...
    def __globalReset__(self) -> None: ...
    def onReset(self) -> None: ...
    def __globalOnEnd__(self, next: int) -> None: ...
    def onEnd(self, next: int) -> None: ...
    def __globalOnStart__(self, prev: int, meta: dict[Any, Any] = ...) -> None: ...
    def onStart(self, prev: int) -> None: ...
    def onPreStart(self, prev: int) -> None: ...
    def firstStart(self) -> None: ...
    def __globalEventHandler__(self, e: pg.event.Event) -> Union[bool, None]: ...
    def eventHandler(self, e: pg.event.Event) -> bool: ...
    def __globalKeyHandler__(self, ks: ScancodeWrapper) -> Union[bool, None]: ...
    def keyHandler(self, ks: ScancodeWrapper) -> Union[bool, None]: ...
    def onKey(self, k: int) -> None: ...
    def onMouseUp(self, k: int, pos: Vector) -> None: ...
    def onMouseDown(self, k: int, pos: Vector) -> None: ...
    def withMetadata(self, meta: dict[Any, Any]) -> Scene: ...

def addScene(name: str, framerate: int = ..., windowName: str = ..., windowSize: Union[tuple[int], int, Vector] = ..., windowPos: Union[int, Vector] = ..., windowIcon: Union[pg.Surface, None] = ...) -> Callable[[Type[Scene]], Scene]: ...

window: Incomplete
screen: Incomplete
CLOCK: Incomplete

class Game:
    currentTick: int
    scene: Incomplete
    def run(self) -> None: ...
    cur: Incomplete
    def __init__(self, starter: str, _debug: bool = ...) -> None: ...
    def changeSceneTo(self, to: str, metadata: dict[Any, Any] = ...) -> None: ...
